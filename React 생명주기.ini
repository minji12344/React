자동, 수동 로또 만들기

- 생명주기

1) 마운팅 (Mounting)
컴포넌트 인스턴스가 생성되어 DOM에 삽입될 때, 메소드들이 차례로 실행된다.
+ constructor() : 컴포넌트가 마운트되기 전에 호출된다. 초기 state를 정의, 설정할 수 있다.
+ static getDerivedStateFromProps() : props를 받아 state를 업데이트할 때 사용된다.
+ render() : 컴포넌트 UI를 핸더링 한다.
+ componentDidMount() : 컴포넌트가 마운트된 직후(DOM에 삽입된 직후)

2) 업데이팅 (Updating)
props나 state가 변경되면 업데이팅이 발생하고 메소드들이 차례로 실행된다.
+ static getDerivedStateFromProps()
+ shouldComponentUpdate() : props나 state를 변경 시 리랜더링 전에 호출된다.
+ render()
+ getSnampshotBeforeUpdate() : render의 결과가 DOM에 반영되기 직전에 호출된다.
+ componentDidUpdate() : 업데이트 직후에 실행된다. 이전 props와 state를 호출한다.

3) 언마운팅 (Unmounting)
컴포넌트가 DOM에서 제거될 때, 메소드가 실행된다.
+ componentWillUnmount()


- Fragment
React에서 여러 요소를 감싸주기 위해 사용되는 특별한 컴포넌트
Fragment를 사용하면 추가적인 DOM노드를 생서하지 않고도 여러 요소를 그룹화할 수 있다.
일반적으로 JSX 코드에서 컴포넌트에는 하나의 최상위 요소만이 존재해야 한다. 그래서 불필요하게 <div> 또는 다른 요소를 선언한다.
이러한 상황에서 Fragment를 사용해서 요소들을 그룹화한다.
Fragment는 아무런 출력을 하지 않고, 자식 요소들을 그룹화하는 역할만 수행한다.
Fragment는 <> 열고, </> 닫는다. (혹은 <React.Fragment> </React.Fragment> 로 작성할 수 있다.)

class Example extends Componenet {
    render() {
        return (
            <div>
                <div>
                    <p>안녕하세요~</p>
                    <button>눌러주세요~</button>
                </div>
                <div>
                    <p>안녕히 가세요~</p>
                    <button>누르지마세요~</button>
                </div>
            </div>
        )
    };
}

class Example extends Componenet {
    render() {
        return (
            <>
                <>
                    <p>안녕하세요~</p>
                    <button>눌러주세요~</button>
                </>
                <>
                    <p>안녕히 가세요~</p>
                    <button>누르지마세요~</button>
                </>
            </>
        )
    };
}

- Context API (상태 관리 라이브러리)
React 내장 기능, 복잡한 어플리케이션에서 여러 컴포넌트 간의 상태를 공유하기 위해 사용한다.
전역적으로 데이터를 공유할 수 있게 해주는 기능이다. 주로 어플리케이션 전체나 일부 컴포넌트 트리에서 공유해야하는 데이터에 사용된다.
Context API를 사용하면 중간 단계의 컴포넌트들을 거치지 않고 컴포넌트 트리 아래의ㅡ 모든 컴포넌트 들이 값을 공유할 수 있다.

const MyContext = React.createContext(defaultValue);

Provider 컴포넌트를 사용하여 하위 컴포넌트들에게 현재의 text값을 전달한다.
<MyContext.Provider value={}>

하위 컴포넌트에서는 MyContext.Consumer를 사용하여 context값을 소비하거나,
useContext() Hook을 사용하여 함수형 컴포넌트 내에서 직접 접근할 수 있다.

- Redux (상태 관리 라이브러리)
어플리케이션의 상태를 저장하는 중앙 집중식 저장소(store) 개념을 제공하며,
상태 변경은 action, recucer 등을 통해 관리한다.
react-redux 별도의 라이브러리가 함께 자주 사용되며, Redux store와 React 컴포넌트 사이의 연결을 돕는다.
단, Redux는 큰 규모와 복잡한 상태 관리가 필요한 프로젝트에서 주로 사용된다.