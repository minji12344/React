- Hooks : React 함수형 컴포넌트에서 상태(state)와 생명주기를 사용할 수 있게 해주는 기능.

클래스 컴포넌트 -> 함수형 컴포넌트

1. useState Hook
상태(state)를 함수형 컴포넌트에서 관리할 수 있게 해준다.
일반적으로 배열 형태로 반환되며, 첫번째 값이 상태 값, 두번째 값이 상태값을 업데이트해주는 함수

import React, {useState} from 'react';

function Example() {
    const [num(변수), setNum(함수)] = useState(1);

    const Click = () => {
        setNum(num+1);
    };

    return (
        <p>값 : {num}</p>
        <buttonn onClick={Click}>증가</button>
    );
}

2. useEffect Hook
생명주기 메서드(componentDidMount, componentDidUpdate, componentWillUnmount) 과 비슷한 역할을 한다.
특정 작업, 상태 변화를 진행함에 있어 부작용(side effect)을 처리하는 데 사용한다.
side effect는 데이터 가져오기, 수동적인 DOM 조작 등과 같이 다른 컴포넌트에 영향을 줄 수 있는 작업들

import React, {useState, useEffect} from 'react';

function Example() {
    const[num, setNum] = useState(1);

    useEffect(() => {
        document.title = '값: ${num}'; // <- side effect

        return () => { // <- cleanup
            document.title = 'React App'
        };
    }, [num]);

    // 첫번째 인자는 side effect를 수행하는 함수
    // 첫번째 인자는 함수 내부에서 문서 제목을 변경한다.
    // 두번째 인자는 dependency array
    // 두번째 인자는 배열이 변할 때, 첫번째로 전달된 side effect 함수가 실행된다.

    // cleanup function (반환하는 함수)
    // 컴포넌트 unmount시 dependency가 변경되기 전에 여기서 필요한 작업을 할 수 있다.

    return (
        <p>값 : {num}</p>
        <buttonn onClick={() => setNum(counnt+1)}>증가</button>
    );
}

- useContext Hook
Context API를 함수형 컴포넌트에서 사용할 수 있도록 도와준다.
전역적인 상태를 관리하거나 깊은 중첩에 걸친 컴포넌트들에게 props를 전달하는 것을 피하기 위해 사용된다.
useContext Hook을 사용하면 context 객체를 인자로 받아 해당 context의 값을 반환한다.
이 값은 context Provider 컴포넌트에서 제공되며, Provider가 없다면 context 객체 생성 시 전달된 기본값이 된다.

import React, {useContext} from 'react';

const MyContext = React.createContext();

function MyComponent() {
    const value = useContext(MyContext);

    return <p>{value}</p>
}

function Example() {
    return (
        <MyContext.Provider value= "Hello">
            <MyComponent/>
        </MyContext.Provider>
    )
}

+ Provider
Context API에서 중요한 역할을 하는 컴포넌트
Provider는 context를 생성할 때 반환되는 컴포넌트로, 그 자식 컴포넌트들에게 context값을 제공한다.

- useReducer Hook
복잡한 상태 로직을 다루기 위해 사용된다. useState보다 더 강력한 방식으로 작동하며
액션(action)과 리듀서(reducer) 패턴을 사용한다.
현재 상태와 함수를 쌍으로 제공한다. 함수는 action을 인자로 받아 reducer한테 전달하고,
reducer는 현재 상태와 action을 기반으로 새로운 상태를 생성한다.

import React, {useReducer} from 'react';
const reducer = (state, action) => {
    switch (action.type) {
        case 'increment':
            return {count:state.count};
        case 'decrement':
            return {count:state.count};
        default:
            return {count:state.count};
    }
}

function Example() {
    const [state, dispatch] = useReducer(reducer, {count: 0});

    return (
        <>
            <p>Count: {state.count}</p>
            <button onClick={() => dispatch({type: 'increment'})}>+</button>
            <button onClick={() => dispatch({type: 'decrement'})}>-</button>
        </>
    );
}
---------------------------------------------------------------------------------------------

- function 키워드
화살표 함수 이전에 많이 쓰던 것

const func = function sum(a, b) {

}

- (), {}
블록 {}, 변수{}
매개변수 ()

화살표 함수
{} -> 여러 줄, return이 있을 때
() -> 단일 표현식(한 줄), return이 없을 때

- ...(전개 연산자)
새로운 배열을 생성해서 원본 배열이 변경되지 않는다. 함수형 프로그래밍은 불변성의 원칙에 따라 새로운 상태나
데이터 구조를 만드는 것이 권장된다. <- push 보다는 ...이 선호된다
예기치 않은 데이터 수정이나 부작용이 발생하는 것을 방지할 수 있다.


---------------------------------------------------------------------------------------------

- Performance Hooks
Node.js의 API, 어플리케이션의 성능을 측정하고 분석하기 위한 도구(다양한 이벤트,, 작업에 세밀한 타이밍 정보를 제공한다.)

1) Performance Timeline : 특정 작업이 언제 시작했고 언제 끝났는지 그리고 그 사이에 무슨 일이 발생했는지
2) User Timing : 개발자가 직접 특정 코드의 실행시간을 측정할 수 있게 한다.
3) High Resolution Time : 마이크로초 단위 시간 측정
4) Performance Observer : Performance Timeline에서 일어나는 변화를 비동기적으로 관찰

import {performance} from 'perf_hooks';

function myPerformance() {
    const start = performance.now();

    for()

    const end = performance.now()

    console.log(end - start);
}

myPerformance();


-Ref Hooks
.current 속성으로 변경 가능한 ref 객체를 반환한다.
1) DOM 접근 : DOM 요소에 직접적으로 접근할 때, useRef를 사용하여 해당 요소의 참조를 저장할 수 있다.
2) 변수 저장 : 컴포넌트 라이프 사이클 동안 값이 유지되어야 하지만, 리랜더링이 되지 않는 변수를 저장하는 데 사용된다.

import React, {useRef} from 'react';

function TextInputButton() {
    const input = useRef(null);

    const onBtnClick = () => {
        input.current.focus();
    };

    return (
        <>
            <input ref={input} type="text"/>
            <button onClick={onBtnClick}>입력창으로</button>
        </>
    )
}

export default {TextInputButton, TextInputButton2}; <- 순서대로 꺼내쓰면 된다.

- Custom Hook
함수형 컴포넌트 내에서 로직을 재사용하기 위한 기능
use로 시작하는 함수를 작성하여, 다른 컴포넌트에서 쓸 수 있게 해준다.
1) 함수 이름 : Custom Hook 함수는 use로 시작해야 한다.
2) React Hooks 사용 : 커스텀 훅 내부에 다른 React Hook을 자유롭게 사용할 수 있다.
3) 로직 추상화 : 특정 로직 또는 기능을 추상화하여 제공해야 한다.

import {useState, useEffect} from 'react';

function useWindowWidth() {
    const [windoWidth, setWindoWidth] = useState(window.innerWidth);

    useEffect(() => {
        const handleResize = () => {
            setWindoWidth(window.innerWidth)
        }

        window.addEventListener('resize', handleResize);

        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);
    return windoWidth;
}

function otherComponent() {
    const windoWidth = useWindowWidth();

    return <p>Window Width: {windoWidth}</p>;
}

1. 장바구니
입력창에 장바구니에 넣을 것을 적어서 장바구니에 추가할 수 있다.
완료된 항목을 체크할 수 있는 체크박스

2. 